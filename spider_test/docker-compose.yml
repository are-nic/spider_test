version: '3'
services:

  accounting:
    container_name: accounting_api
    restart: on-failure
    build:
      context: ./accounting
      dockerfile: Dockerfile
    expose:
      - '8000'
    env_file:
      - ./accounting/.env.dev
    depends_on:
      rabbitmq:
        condition: service_healthy      # пока не запуститься служба RabbitMQ не запускать сервис Accounting
      db:
        condition: service_healthy      # пока не запуститься База данных не запускать сервис Accounting
    command: sh -c "python manage.py makemigrations api && \
                    python manage.py migrate && \
                    python manage.py createsuperuser --noinput && \
                    python manage.py collectstatic --no-input && \
                    gunicorn accounting.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      # для обмена данными между локальной директорией проекта и такой же директорией в контейнере (/path/on/host:/path/in/container)
      - ./accounting/static:/usr/src/accounting/static

  sales:
    container_name: sales_api
    restart: on-failure
    build:
      context: ./sales
      dockerfile: Dockerfile
    expose:
      - '8001'
    env_file:
      - ./sales/.env.dev
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_healthy
    command: sh -c "python manage.py makemigrations api && \
                    python manage.py migrate && \
                    python manage.py createsuperuser --noinput && \
                    python manage.py collectstatic --no-input && \
                    gunicorn sales.wsgi:application --bind 0.0.0.0:8001"
    volumes:
      - ./sales/static:/usr/src/sales/static

  warehouse:
    container_name: warehouse_api
    restart: on-failure
    build: ./warehouse
    expose:
      - '8002'
    env_file:
      - ./warehouse/.env.dev
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_healthy
    command: sh -c "python manage.py makemigrations api && \
                    python manage.py migrate && \
                    python manage.py createsuperuser --noinput && \
                    python manage.py collectstatic --no-input && \
                    gunicorn warehouse.wsgi:application --bind 0.0.0.0:8002"
    volumes:
      - ./warehouse/static:/usr/src/warehouse/static

  db:
    container_name: mysql
    image: mysql:8.0.33
    restart: on-failure
    command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    volumes:
      - ./mysql:/docker-entrypoint-initdb.d
    environment:
      - MYSQL_ROOT_PASSWORD=root
    expose:
      - '3306'
    healthcheck:
      test: 'mysqladmin ping -h localhost -u root -p$$MYSQL_ROOT_PASSWORD'
      interval: 10s   # время в течение которого сервер ждет ответа по тестовой команде
      timeout: 5s    # время задержки между проверками
      retries: 5      # кол-во сбоев, после которых контейнер считается неработоспособным

  nginx:
    container_name: nginx
    restart: on-failure
    build: ./nginx
    ports:
      - "80:80"
      - "8000:80"
      - "8001:80"
      - "8002:80"
    depends_on:
      - accounting
      - sales
      - warehouse
    volumes:
      - ./accounting/static:/usr/src/accounting/static
      - ./sales/static:/usr/src/sales/static
      - ./warehouse/static:/usr/src/warehouse/static

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3.12.0-management
    hostname: rabbitmq
    restart: on-failure
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    expose:
      - 5672
      - 15672
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 3

  consumer_warehouse:
    build: ./warehouse
    restart: on-failure
    container_name: consumer_warehouse
    env_file:
      - ./warehouse/.env.dev
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_healthy
      warehouse:
        condition: service_started
    command: sh -c "python manage.py consumer"

  consumer_sales:
    build: ./sales
    restart: on-failure
    container_name: consumer_sales
    env_file:
      - ./sales/.env.dev
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_healthy
      sales:
          condition: service_started
    command: sh -c "python manage.py consumer"

  consumer_accounting:
    build: ./accounting
    container_name: consumer_accounting
    restart: on-failure
    env_file:
      - ./accounting/.env.dev
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_healthy
      accounting:
        condition: service_started
    command: sh -c "python manage.py consumer"